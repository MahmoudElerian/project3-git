version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
       type: string    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.ID >> --recursive
            aws cloudformation delete-stack udapeople-backend-<< parameters.ID >> 
            aws cloudformation delete-stack --stack-name frontend-<< parameters.ID >>
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      ID:
       type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token: << parameters.workID >>" --request GET https://api.memstash.io/values/status)
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migration:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm audit fix
            npm run build
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm i
            npm test
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: test back-end
          command: |
            cd ~/project3-git/frontend
            npm i
            npm test
            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan back-end
          command: |
            cd frontend
            npm i
            npm audit --audit-level=critical --force
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: test back-end
          command: |
            cd ~/project3-git/frontend
            npm i
            npm audit --audit-level=critical
            cat package.json
            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker: 
      -image: amazon/aws-cli
    steps:
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project=udapeople --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID = ${CIRCLE_WORKFLOW_ID}  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/forntend.yml --tags project=udapeople --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} --parameter-overrides ID = ${CIRCLE_WORKFLOW_ID}  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters Name= tag:Name ,Values= backend-${CIRCLE_WORKFLOW_ID} --output text >> .circleci/ansible/inventory.txt
##
      - persist_to_workspace:
          root: ~/
          paths:
          - project/.circleci/ansible/inventory.txt
##
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 

  configure-infrastructure:
    docker:
      -image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b1:25:36:f7:8a:0b:a5:d7:34:a8:c6:8f:04:18:95:d2"]
#     - attach_workspace:
          at: ~/project        
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
            exit 1
      - run:
          name: Configure server
          command: |
#            cd .circleci/ansible
            echo "content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            exit 1
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID}          
  run-migrations:
    docker:
      -image: circleci/node:13.8.0
    steps:
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm run migartions > migration.txt
            echo "the migration file"
            cat migration.txt
            echo "the env file"
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
#            cd backend
            if grep -q "has been executed successfully" migration.txt
            then
             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/status
            
            else
             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/status
            fi
            exit 1
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 

      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}  
  deploy-frontend:
    docker:
      -image: amazon/aws-cli
    steps:
      - run:
          name: Install dependencies
          command: |
#            yum update
            yum upgrade
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash - 
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
#            cd frontend
            BACKEND_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                          --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm audit fix
            BACKEND_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                          --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "again"
            echo "${API_URL}"
            echo API_URL=$API_URL > .env
            npm run build
            echo "show .env"
            cat .env
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID} --delete
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b1:25:36:f7:8a:0b:a5:d7:34:a8:c6:8f:04:18:95:d2 "]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
#            apk add --update nodejs npm tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo "env file"
            cat .env            
            echo "check dist file"
            cd ../
            tar -C backend -czvf backendartifact.tar.gz .
            cd .circleci/ansible
            echo "content"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml  
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID} 
      - revert-migrations:
          workID: ${CIRCLE_WORKFLOW_ID}  
  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
              URL="https://blog.udacity.com/"
              if curl -s --head ${URL} | grep "Welcome"
              then
               return 0
              else
               return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
          requires: [cloudfront-update]